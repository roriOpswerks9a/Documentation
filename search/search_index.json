{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>This document represents our team\u2019s effort to design and implement a modern Continuous Integration (CI) and Continuous Deployment (CD) using industry-standard DevOps tools.</p> <p>Our goal is to create a solution that does more than just build and deploy code \u2014 it must follow best practices for automation, reliability, collaboration, and recovery.  </p> <p>The technologies chosen are TeamCity, Jenkins, Spinnaker, and Istio, which reflect the tools used in real-world production environments across many organizations.</p>"},{"location":"#purpose-of-this-document","title":"\ud83c\udfaf Purpose of this Document","text":"<ul> <li>To serve as a technical reference for panelists, advisers, and engineers reviewing our case study.  </li> <li>Provide clarity on how code changes move from integration to development all the way to production.  </li> <li>To act as a runbook and operations manual, showing how we plan to respond when failures happen.  </li> </ul>"},{"location":"#scope","title":"\ud83d\udccc Scope","text":"<p>This case study covers:</p> <ul> <li>Source code version control using GitHub with strict branching discipline.  </li> <li>Build automation using TeamCity for testing and Jenkins for Docker image creation.  </li> <li>Deployment automation using Spinnaker with canary deployment enabled by Istio.  </li> <li>Operational readiness through simulated incidents, troubleshooting, and recovery.  </li> </ul>"},{"location":"#outcome","title":"\ud83d\udcd6 Outcome","text":"<p>By following this documentation, you\u2019ll gain both a technical roadmap and an operational playbook for managing CI/CD.</p>"},{"location":"description/","title":"\ud83d\udcc4 Description","text":"<p>Our team has developed a CI/CD solution that integrates four key tools across two distinct environments:</p> <ul> <li>CI Environment (Google Cloud VM):   Hosts Jenkins and TeamCity for source integration, build automation, and testing.  </li> <li>CD Environment (Kubernetes Cluster):   Runs Spinnaker for deployment orchestration and Istio for service mesh traffic management.  </li> </ul> <p>This separation keeps production clean: builds and tests run outside the cluster, while deployments and traffic management stay inside Kubernetes. The web application is a Java-based project (chosen because of its natural compatibility with TeamCity). It is containerized with Docker, versioned through GitHub, and deployed into Kubernetes. The deployment strategy follows a canary release model, where new versions are introduced to a small percentage of users before full rollout. Istio enables traffic splitting, while Spinnaker orchestrates the process.</p>"},{"location":"description/#sample-lang-ni-nga-diagram","title":"\ud83c\udfd7 Sample lang ni nga Diagram","text":"<pre><code>graph LR\n  A[Start] --&gt; B{Failure?};\n  B --&gt;|Yes| C[Investigate...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Success!];</code></pre>"},{"location":"description/#sample-lang-ni-nga-diagram_1","title":"\ud83c\udfd7 Sample lang ni nga Diagram","text":"<pre><code>sequenceDiagram\n  autonumber\n  Server-&gt;&gt;Terminal: Send request\n  loop Health\n      Terminal-&gt;&gt;Terminal: Check for health\n  end\n  Note right of Terminal: System online\n  Terminal--&gt;&gt;Server: Everything is OK\n  Terminal-&gt;&gt;Database: Request customer data\n  Database--&gt;&gt;Terminal: Customer data</code></pre>"},{"location":"features/","title":"\u2b50 Features","text":""},{"location":"features/#web-app-deployment","title":"\ud83d\udce6 Web App Deployment","text":"<ul> <li>Java-based web app containerized with Docker.  </li> <li>Runs in Kubernetes with five replicas for reliability.  </li> <li>Canary deployment strategy \u2192 traffic gradually shifted using Istio.  </li> </ul>"},{"location":"features/#ci-with-teamcity","title":"\u2699\ufe0f CI with TeamCity","text":"<ul> <li>GitHub repo integrated with TeamCity.  </li> <li>Code compilation + unit testing automated on every Pull Request (PR).  </li> <li>Status checks ensure only passing builds can be merged.  </li> </ul>"},{"location":"features/#image-build-with-jenkins","title":"\ud83c\udfd7\ufe0f Image Build with Jenkins","text":"<ul> <li>Jenkins builds Docker images from source.  </li> <li>Dual tagging: <code>BUILD_NUMBER-hash</code> (versioned) + <code>latest</code>.  </li> <li>Pushes securely to DockerHub.  </li> </ul>"},{"location":"features/#cd-with-spinnaker","title":"\ud83d\ude80 CD with Spinnaker","text":"<ul> <li>Spinnaker watches DockerHub and/or Jenkins webhook.  </li> <li>Automatically deploys new images to canary, then stable.  </li> <li>Supports rollback if canary fails.  </li> </ul>"},{"location":"features/#git-workflow-branch-protection","title":"\ud83c\udf3f Git Workflow &amp; Branch Protection","text":"<ul> <li><code>main</code> \u2192 production branch.  </li> <li><code>dev</code> \u2192 development/testing branch.  </li> <li>Pull Request workflow enforced with reviews + approvals.  </li> </ul>"},{"location":"features/#resilience-recovery","title":"\ud83d\udee1\ufe0f Resilience &amp; Recovery","text":"<ul> <li>Runbooks prepared for CI/CD failures, merge conflicts, and rollout issues.  </li> <li>Ability to quickly rollback to last stable release.  </li> </ul>"},{"location":"recovery/","title":"Recovery","text":""},{"location":"runbook/","title":"Runbook","text":"<p>Jenkins Setup</p> Step 1<pre><code># Function to add two numbers\ndef add_two_numbers(num1, num2):\n    return num1 + num2\n\n# Example usage\nresult = add_two_numbers(5, 3)\nprint('The sum is:', result)\n</code></pre> Step 2<pre><code># Function to add two numbers\ndef add_two_numbers(num1, num2):\n    return num1 + num2\n\n# Example usage\nresult = add_two_numbers(5, 3)\nprint('The sum is:', result)\n</code></pre> Step 3<pre><code># Function to add two numbers\ndef add_two_numbers(num1, num2):\n    return num1 + num2\n\n# Example usage\nresult = add_two_numbers(5, 3)\nprint('The sum is:', result)\n</code></pre> Step 4<pre><code># Function to add two numbers\ndef add_two_numbers(num1, num2):\n    return num1 + num2\n\n# Example usage\nresult = add_two_numbers(5, 3)\nprint('The sum is:', result)\n</code></pre>"},{"location":"tools/","title":"\ud83d\udee0\ufe0f Tools","text":""},{"location":"tools/#github","title":"\ud83d\udd39 GitHub","text":"<ul> <li>Manages version control with main (production) and dev (development) branches.  </li> <li>Pull Requests enforce collaboration, approval, and status checks.  </li> <li>Prevents direct commits to main.  </li> </ul>"},{"location":"tools/#teamcity","title":"\ud83d\udd39 TeamCity","text":"<ul> <li>Acts as our Continuous Integration system.  </li> <li>Builds the Java app, runs automated unit tests, and reports results.  </li> <li>Provides status checks that must pass before merging PRs.  </li> </ul>"},{"location":"tools/#jenkins","title":"\ud83d\udd39 Jenkins","text":"<ul> <li>Specializes in building container images.  </li> <li>Uses Jenkinsfile to automate Docker builds and push images to DockerHub.  </li> <li>Ensures every build has a versioned tag and a moving latest tag.</li> </ul>"},{"location":"tools/#dockerhub","title":"\ud83d\udd39 DockerHub","text":"<ul> <li>Central registry for all container images.  </li> <li>Acts as the trigger source for Spinnaker pipelines.  </li> </ul>"},{"location":"tools/#spinnaker","title":"\ud83d\udd39 Spinnaker","text":"<ul> <li>Orchestrates continuous delivery.  </li> <li>Deploys canary first, then promotes to stable if successful.  </li> <li>Integrates with DockerHub to auto-trigger on new images.  </li> </ul>"},{"location":"tools/#istio","title":"\ud83d\udd39 Istio","text":"<ul> <li>Service mesh that controls traffic routing.  </li> <li>Splits traffic between stable and canary deployments.  </li> <li>Provides observability into rollout performance.  </li> </ul>"},{"location":"tools/#kubernetes","title":"\ud83d\udd39 Kubernetes","text":"<ul> <li>Hosts the application workloads.  </li> <li>Ensures five healthy replicas are always running.  </li> <li>Provides scaling, self-healing, and deployment orchestration.</li> </ul>"},{"location":"workflow/","title":"Workflow","text":""}]}