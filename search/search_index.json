{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>This documentation provides a detailed overview of our CI/CD Case Study project. The project demonstrates how to design, implement, and operate a CI/CD pipeline using TeamCity, Jenkins, and Spinnaker, with GitHub as the version control system and Kubernetes as the deployment platform.</p> <p>By following this documentation, you will gain an understanding of: - How CI/CD pipelines are built with modern tools. - How automated deployments work in Kubernetes. - How to handle failures with structured runbooks. - How to maintain reliability with disaster recovery planning.</p>"},{"location":"#web-app-deployment","title":"Web App Deployment","text":""},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Displays a plain colored background when accessed.</li> <li>Must be accessible over the internet.</li> <li>Source code (e.g., Flask or Java) should be buildable and compilable in TeamCity.</li> </ul>"},{"location":"#kubernetes-deployment","title":"Kubernetes Deployment","text":""},{"location":"#requirements_1","title":"Requirements","text":"<ul> <li>Canary deployment strategy must be used.</li> <li>Each deployment must maintain five (5) healthy replicas.</li> </ul>"},{"location":"#jenkins-image-build","title":"Jenkins \u2013 Image Build","text":"<ul> <li>Jenkins will be deployed to build Docker images.</li> <li>Build is managed with a Jenkinsfile.</li> <li>Docker image must be pushed to Docker Hub.</li> </ul>"},{"location":"#teamcity-continuous-integration-ci","title":"TeamCity \u2013 Continuous Integration (CI)","text":"<ul> <li>Deploy TeamCity to handle CI processes.</li> <li>Integrate GitHub repository containing the app source code.</li> <li>Automated unit tests must run with each build.</li> </ul>"},{"location":"#spinnaker-continuous-deployment-cd","title":"Spinnaker \u2013 Continuous Deployment (CD)","text":"<ul> <li>Spinnaker is responsible for deploying to Kubernetes.</li> <li>Deployment triggers:</li> <li>After Jenkins job succeeds, or</li> <li>When a Docker image is successfully pushed.</li> </ul>"},{"location":"#version-control","title":"Version Control","text":"<ul> <li>Git repository must have two branches:</li> <li><code>main</code> \u2192 Production environment.</li> <li><code>dev</code> \u2192 Development environment.</li> <li>Branch protection requirements:</li> <li>PR approval required before merging.</li> <li>All status checks must pass (TeamCity build success).</li> <li>GitHub repo must contain:</li> <li>Automation codebase</li> <li>Infrastructure configurations</li> <li>Documentation</li> <li>Commit history must show only merged PRs.</li> </ul>"},{"location":"#runbooks","title":"Runbooks","text":"<p>This section provides step-by-step procedures to handle failures.</p>"},{"location":"#cicd-failures","title":"CI/CD Failures","text":"<ul> <li>Breaking code changes (syntax or logical errors).</li> <li>Breaking TeamCity or Spinnaker configs.</li> <li>TeamCity build agent unavailability.</li> </ul>"},{"location":"#version-control-failures","title":"Version Control Failures","text":"<ul> <li>Merge conflicts between <code>main</code> and <code>dev</code>.</li> <li>Steps to resolve and redeploy.</li> </ul>"},{"location":"#disaster-recovery-plan","title":"Disaster Recovery Plan","text":"<ul> <li>Backup and restore strategies for Kubernetes resources.</li> <li>Rollback strategies for failed deployments.</li> <li>Recovery steps for CI/CD platforms (Jenkins, TeamCity, Spinnaker).</li> </ul>"},{"location":"#operations-simulation","title":"Operations Simulation","text":"<p>Failures introduced for testing resilience:</p> <ul> <li>CI/CD Failures</li> <li>Broken code</li> <li>Broken configs</li> <li>Missing build agents</li> <li>Version Control Failures</li> <li>Merge conflicts between branches</li> </ul> <p>Each scenario is tested and resolved through defined runbooks.</p>"},{"location":"description/","title":"Description","text":""},{"location":"description/#1-solution-description","title":"1. Solution Description","text":"<p>An overview of the problem being solved and how the solution addresses it. This section introduces the purpose, scope, and expected outcomes.</p>"},{"location":"description/#2-architecture-diagram","title":"2. Architecture Diagram","text":"<p>A high-level diagram showing how the solution works, including major components (e.g., CI server, CD tool, Kubernetes cluster, GitHub). This provides a visual understanding of the system design.</p>"},{"location":"description/#3-tools-and-technologies","title":"3. Tools and Technologies","text":"<p>A list of the core tools, frameworks, and platforms used in the solution, along with a brief explanation of why each was chosen.</p>"},{"location":"description/#4-workflows","title":"4. Workflows","text":"<p>Diagrams or step-by-step visualizations of processes, such as: - CI/CD pipeline stages - Deployment flow - Monitoring and alerting  </p> <p>These help illustrate how tasks move through the system.</p>"},{"location":"description/#5-features-of-the-solution","title":"5. Features of the Solution","text":"<p>Key capabilities and functionalities delivered by the solution, highlighting what makes it useful, reliable, or unique.</p>"},{"location":"description/#6-runbooks-methods-of-procedure","title":"6. Runbooks / Methods of Procedure","text":"<p>Operational documentation that includes: - Step-by-step procedures for deploying, maintaining, and troubleshooting the system. - Standard operating practices for common scenarios.  </p> <p>This ensures that operations teams can manage the system effectively.</p>"},{"location":"description/#7-disaster-recovery-plan","title":"7. Disaster Recovery Plan","text":"<p>A documented strategy for recovering the system in the event of failures, outages, or data loss. This section should describe: - Recovery objectives (RTO, RPO) - Backup procedures - Restoration steps - Escalation processes  </p> <p>This outline serves as the general structure of your documentation, ensuring consistency and clarity for readers.</p>"},{"location":"features/","title":"Features","text":""},{"location":"recovery/","title":"Recovery","text":""},{"location":"runbook/","title":"Runbook","text":"<p>Jenkins Setup</p> Step 1<pre><code># Function to add two numbers\ndef add_two_numbers(num1, num2):\n    return num1 + num2\n\n# Example usage\nresult = add_two_numbers(5, 3)\nprint('The sum is:', result)\n</code></pre> Step 2<pre><code># Function to add two numbers\ndef add_two_numbers(num1, num2):\n    return num1 + num2\n\n# Example usage\nresult = add_two_numbers(5, 3)\nprint('The sum is:', result)\n</code></pre> Step 3<pre><code># Function to add two numbers\ndef add_two_numbers(num1, num2):\n    return num1 + num2\n\n# Example usage\nresult = add_two_numbers(5, 3)\nprint('The sum is:', result)\n</code></pre> Step 4<pre><code># Function to add two numbers\ndef add_two_numbers(num1, num2):\n    return num1 + num2\n\n# Example usage\nresult = add_two_numbers(5, 3)\nprint('The sum is:', result)\n</code></pre>"},{"location":"tools/","title":"Tools","text":""},{"location":"workflow/","title":"Workflow","text":""}]}